version: '1.0'

services:
  lottery_reverse_proxy:
    image: traefik:v2.10
    container_name: lottery_reverse_proxy
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=kk_ong2233@naver.com
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`lottery-dashboard.jh8459.com`)
      - traefik.http.routers.api.middlewares=auth
      - traefik.http.middlewares.auth.basicauth.users=${DASHBOARD_AUTH}
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.tls.certresolver=myresolver
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.routers.http-catchall.entrypoints=web
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
    networks:
      - lottery_net_default

  lottery_api_server:
    image: jh8459/lottery_api_server:latest
    container_name: lottery_api_server
    platform: linux/amd64
    build:
      context: ./api
      dockerfile: Dockerfile
    volumes:
      - ./api/logs:/api/logs
      - ./api/public:/api/public
      - ./api/resource:/api/resource
    env_file:
      - ./api/.env
    environment:
      - TZ=Asia/Seoul
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
    labels:
      - traefik.enable=true
      - traefik.http.routers.lottery_api_server.rule=Host(`lottery-api.jh8459.com`)
      - traefik.http.routers.lottery_api_server.entrypoints=websecure
      - traefik.http.routers.lottery_api_server.tls.certresolver=myresolver
      - traefik.http.services.lottery_api_server.loadbalancer.server.port=${API_SERVER_PORT}
      - traefik.http.services.lottery_api_server.loadbalancer.healthcheck.path=/health
      - traefik.http.services.lottery_api_server.loadbalancer.healthcheck.interval=11s
      - traefik.http.services.lottery_api_server.loadbalancer.healthcheck.timeout=1s
      - traefik.docker.network=lottery_net_default
    networks:
      - lottery_net_default
    depends_on:
      - lottery_reverse_proxy
      - lottery_redis

  lottery_crawler_server:
    image: jh8459/lottery_crawler_server:latest
    container_name: lottery_crawler_server
    platform: linux/amd64
    build:
      context: ./crawler
      dockerfile: Dockerfile
    volumes:
      - ./crawler/logs:/crawler/logs
      - ./crawler/public:/crawler/public
      - ./crawler/resource:/crawler/resource
    env_file:
      - ./crawler/.env
    environment:
      - TZ=Asia/Seoul
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
    labels:
      - traefik.enable=true
      - traefik.http.routers.lottery_crawler_server.rule=Host(`lottery-crawler.jh8459.com`)
      - traefik.http.routers.lottery_crawler_server.entrypoints=websecure
      - traefik.http.routers.lottery_crawler_server.tls.certresolver=myresolver
      - traefik.http.services.lottery_crawler_server.loadbalancer.server.port=${CRAWLER_SERVER_PORT}
      - traefik.http.services.lottery_crawler_server.loadbalancer.healthcheck.path=/health
      - traefik.http.services.lottery_crawler_server.loadbalancer.healthcheck.interval=11s
      - traefik.http.services.lottery_crawler_server.loadbalancer.healthcheck.timeout=1s
      - traefik.docker.network=lottery_net_default
    networks:
      - lottery_net_default
    depends_on:
      - lottery_reverse_proxy
      - lottery_redis

  lottery_redis:
    image: redis:latest
    container_name: lottery_redis
    restart: always
    volumes:
      - ./redis-data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lottery_net_default

networks:
  lottery_net_default:
    driver: bridge
