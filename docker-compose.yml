version: '1.0'

services:
  lottery_api_server:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: lottery_api_server
    ports:
      - '${API_SERVER_PORT}:${API_SERVER_PORT}'
    volumes:
      - ./api/logs:/api/logs
      - ./api/public:/api/public
      - ./api/resource:/api/resource
    env_file:
      - ./api/.env
    environment:
      - TZ=Asia/Seoul
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${API_SERVER_PORT}/health']
      interval: 1h
      timeout: 20s
      retries: 3
      start_period: 20s
    networks:
      - bridge

  lottery_crawler_server:
    build:
      context: ./crawler
      dockerfile: Dockerfile
    container_name: lottery_crawler_server
    ports:
      - '${CRAWLER_SERVER_PORT}:${CRAWLER_SERVER_PORT}'
    volumes:
      - ./crawler/logs:/crawler/logs
      - ./crawler/public:/crawler/public
      - ./crawler/resource:/crawler/resource
    env_file:
      - ./crawler/.env
    environment:
      - TZ=Asia/Seoul
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${CRAWLER_SERVER_PORT}/health']
      interval: 1h
      timeout: 20s
      retries: 3
      start_period: 20s
    networks:
      - bridge

  lottery_redis:
    image: redis:latest
    container_name: lottery_redis
    restart: always
    volumes:
      - ./redis-data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 1h
      timeout: 20s
      retries: 3
    networks:
      - bridge

  lottery_website:
    build:
      context: ./website
      dockerfile: Dockerfile
    container_name: lottery_website
    ports:
      - '${WEBSITE_PORT}:${WEBSITE_PORT}'
    volumes:
      - ./website:/usr/share/nginx/html:ro
    restart: always
    networks:
      - bridge
